import numpy as np
import pandas as pd
import yfinance as yf
import seaborn as sns
import matplotlib.pyplot as plt

# ======================
# CONFIGURACI√ìN INICIAL
# ======================

"""
Este script busca la mejor combinaci√≥n de medias m√≥viles simples (SMA)
para utilizar en una estrategia de cruce de medias m√≥viles (Estrategia_SMA.py).
Se prueban m√∫ltiples combinaciones de per√≠odos para las SMA corta y larga,
y se eval√∫a el rendimiento de la estrategia para cada combinaci√≥n.
Finalmente, se muestra un resumen de las mejores combinaciones y un mapa de calor.
"""

ticker = "EWZ"     # Cambi√° por el activo que quieras
period = "3y"        # Ej: "1y", "5y", "10y", "max"

# Descargamos datos
data = yf.download(ticker, period=period)
data["LogReturn"] = np.log(data["Close"] / data["Close"].shift(1))
data = data.dropna()

# Rangos de medias m√≥viles a probar
short_windows = range(5, 105, 5)     # ej. 5,10,15,20,25,...
long_windows = range(20, 210, 10)   # ej. 20,30,40,...,190

results = []

# ======================
# BUCLE DE OPTIMIZACI√ìN
# ======================

for short in short_windows:
    for long in long_windows:
        if short >= long:
            continue  # ignoramos combinaciones inv√°lidas

        # üîπ CREO UNA COPIA LIMPIA DE LOS DATOS
        df = data.copy()

        # Medias m√≥viles
        df["SMA_short"] = df["Close"].rolling(window=short).mean()
        df["SMA_long"] = df["Close"].rolling(window=long).mean()

        # Se√±ales de compra/venta
        df["Signal"] = np.where(df["SMA_short"] > df["SMA_long"], 1, -1)

        """
        Uso el shift(1) porque:
        - La decisi√≥n de estar long/short se toma al final del d√≠a anterior.
        - El retorno del d√≠a actual se realiza durante el d√≠a actual.
        As√≠, la se√±al del d√≠a anterior se aplica al retorno del d√≠a actual.
        """


        # Retorno de la estrategia (se√±al del d√≠a anterior * retorno del d√≠a actual)
        df["StrategyReturn"] = df["Signal"].shift(1) * df["LogReturn"]
        df = df.dropna()        # eliminamos filas con NaN

        # M√©tricas
        total_return = np.exp(df["StrategyReturn"].sum()) - 1

        """
        1Ô∏è‚É£ data["StrategyReturn"]
            Son los retornos logar√≠tmicos diarios de la estrategia, ya ajustados por las se√±ales (es decir, comprando o vendiendo seg√∫n el cruce).
        2Ô∏è‚É£ .sum()
            Si sum√°s todos los retornos logar√≠tmicos diarios, obten√©s el retorno logar√≠tmico total de todo el per√≠odo.
            Record√° que los log-returns se suman en lugar de multiplicarse, lo que es una de sus grandes ventajas.
        3Ô∏è‚É£ np.exp(...)
            La exponencial revierte el logaritmo.
            Con esto convertimos el retorno logar√≠tmico acumulado en un retorno porcentual real.
        4Ô∏è‚É£ - 1
            Restamos 1 para expresar el resultado en formato cl√°sico:
            0.25 significa +25%
            -0.10 significa -10%
        """

        volatility = df["StrategyReturn"].std() * np.sqrt(252)
        sharpe = (df["StrategyReturn"].mean() / df["StrategyReturn"].std()) * np.sqrt(252)

        results.append([short, long, total_return, volatility, sharpe])


# ======================
# RESULTADOS
# ======================

results_df = pd.DataFrame(results, columns=["SMA_corta", "SMA_larga", "Rendimiento", "Volatilidad", "Sharpe"])
results_df = results_df.sort_values(by="Sharpe", ascending=False)

print("\n" + "----"*20)
print(f"Resultados de la optimizaci√≥n de SMA para {ticker}:\n")
print(results_df.head(10))
print("----"*20 + "\n")

# ======================
# HEATMAP DEL SHARPE
# ======================

# Pivotamos el DataFrame
heatmap_data = results_df.pivot(index="SMA_corta", columns="SMA_larga", values="Sharpe")

plt.figure(figsize=(10, 7))
sns.heatmap(
    heatmap_data,
    annot=True,
    fmt=".3f",
    cmap="RdYlGn",        # Verde = mejor Sharpe
    cbar_kws={"label": "Sharpe Ratio"},
    linewidths=0.5,
    vmax=heatmap_data.max().max(),
    vmin=heatmap_data.min().min(),
    linecolor="gray"
)

best = results_df.iloc[0]
plt.scatter(best["SMA_larga"] + 0.5, best["SMA_corta"] + 0.5,
            s=200, edgecolor="black", facecolor="none", linewidth=2)


plt.title(f"Mapa de calor del Sharpe Ratio\n({ticker} - Estrategia de Cruce de Medias M√≥viles)")
plt.xlabel("SMA Larga")
plt.ylabel("SMA Corta")
plt.tight_layout()
plt.show()
